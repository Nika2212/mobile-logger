/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
var StaticDataContainer = /** @class */ (function () {
    function StaticDataContainer() {
    }
    StaticDataContainer.getSquircleSVG = function () {
        return "\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"58\" height=\"58\" viewBox=\"-304 -304 608 608\">\n                <title>Squircle: x to 4th plus y to 4th equals radius to 4th</title>\n                <path fill=\"#01a0e4\" stroke=\"#01a0e4\" stroke-width=\"4.04\" d=\"M0,288 C126.2,288,196.3563,288,242.1782,242.1782 C288,196.3563,288,126.2,288,0 C288,-126.2,288,-196.3563,242.1782,-242.1782 C196.3563,-288,126.2,-288,0,-288 C-126.2,-288,-196.3563,-288,-242.1782,-242.1782 C-288,-196.3563,-288,-126.2,-288,0 C-288,126.2,-288,196.3563,-242.1782,242.1782 C-196.3563,288,-126.2,288,0,288Z\"/>\n            </svg>\n        ";
    };
    StaticDataContainer.getIconSVG = function () {
        return "\n            <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"bug\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" class=\"svg-inline--fa fa-bug fa-w-16\"><path fill=\"#f8f8f8\" d=\"M511.988 288.9c-.478 17.43-15.217 31.1-32.653 31.1H424v16c0 21.864-4.882 42.584-13.6 61.145l60.228 60.228c12.496 12.497 12.496 32.758 0 45.255-12.498 12.497-32.759 12.496-45.256 0l-54.736-54.736C345.886 467.965 314.351 480 280 480V236c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v244c-34.351 0-65.886-12.035-90.636-32.108l-54.736 54.736c-12.498 12.497-32.759 12.496-45.256 0-12.496-12.497-12.496-32.758 0-45.255l60.228-60.228C92.882 378.584 88 357.864 88 336v-16H32.666C15.23 320 .491 306.33.013 288.9-.484 270.816 14.028 256 32 256h56v-58.745l-46.628-46.628c-12.496-12.497-12.496-32.758 0-45.255 12.498-12.497 32.758-12.497 45.256 0L141.255 160h229.489l54.627-54.627c12.498-12.497 32.758-12.497 45.256 0 12.496 12.497 12.496 32.758 0 45.255L424 197.255V256h56c17.972 0 32.484 14.816 31.988 32.9zM257 0c-61.856 0-112 50.144-112 112h224C369 50.144 318.856 0 257 0z\" class=\"\"></path></svg>\n        ";
    };
    StaticDataContainer.getCloseSVG = function () {
        return "\n            <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"far\" data-icon=\"times\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" class=\"svg-inline--fa fa-times fa-w-10\"><path fill=\"#f8f8f8\" d=\"M207.6 256l107.72-107.72c6.23-6.23 6.23-16.34 0-22.58l-25.03-25.03c-6.23-6.23-16.34-6.23-22.58 0L160 208.4 52.28 100.68c-6.23-6.23-16.34-6.23-22.58 0L4.68 125.7c-6.23 6.23-6.23 16.34 0 22.58L112.4 256 4.68 363.72c-6.23 6.23-6.23 16.34 0 22.58l25.03 25.03c6.23 6.23 16.34 6.23 22.58 0L160 303.6l107.72 107.72c6.23 6.23 16.34 6.23 22.58 0l25.03-25.03c6.23-6.23 6.23-16.34 0-22.58L207.6 256z\" class=\"\"></path></svg>\n        ";
    };
    return StaticDataContainer;
}());
var DOM = /** @class */ (function () {
    function DOM() {
    }
    DOM.createElement = function (tagName, attributeObject, styleObject, parentElement) {
        var newElement = document.createElement(tagName);
        DOM.setStyle(newElement, styleObject);
        DOM.setAttributes(newElement, attributeObject);
        if (parentElement) {
            parentElement.appendChild(newElement);
        }
        return newElement;
    };
    DOM.removeElement = function (el) {
        if (el && el.remove) {
            el.remove();
            return true;
        }
        else {
            return false;
        }
    };
    DOM.setStyle = function (el, styleObject) {
        for (var _i = 0, _a = Object.keys(styleObject); _i < _a.length; _i++) {
            var styleProp = _a[_i];
            el.style[styleProp] = styleObject[styleProp];
        }
    };
    DOM.setAttributes = function (el, attributeObject) {
        for (var _i = 0, _a = Object.keys(attributeObject); _i < _a.length; _i++) {
            var attrProp = _a[_i];
            el.setAttribute(attrProp, attributeObject[attrProp]);
        }
    };
    DOM.renderIf = function (el, state) {
        if (state) {
            el.style.display = 'flex';
        }
        else {
            el.style.display = 'none';
        }
    };
    return DOM;
}());
var LogTypes;
(function (LogTypes) {
    LogTypes["ERROR"] = "ERR";
    LogTypes["WARN"] = "WAR";
    LogTypes["INFO"] = "INF";
})(LogTypes || (LogTypes = {}));
var MobileLogger = /** @class */ (function () {
    function MobileLogger() {
        this.logs = [];
        this.onInit();
    }
    // Ladder Methods
    MobileLogger.prototype.onInit = function () {
        this.setDefaults();
        this.renderButton();
        this.renderModal();
        this.setEvents();
    };
    MobileLogger.prototype.setDefaults = function () { };
    MobileLogger.prototype.setEvents = function () {
        var _this = this;
        window.addEventListener('error', function (error) {
            var newLog = {
                message: error.message,
                timestamp: new Date().getTime(),
                type: LogTypes.ERROR
            };
            _this.addLog(newLog);
        }, false);
        this.inspectButtonRef.addEventListener('click', function () { return _this.toggleModal(); }, false);
        var that = this;
        // https://stackoverflow.com/questions/19846078/how-to-read-from-chromes-console-in-javascript/19846113
        console['defaultLog'] = console.log.bind(console);
        console.log = function () {
            that.catchConsole(arguments, LogTypes.INFO);
            console['defaultLog'].apply(console, arguments);
        };
        console['defaultWarn'] = console.warn.bind(console);
        console.warn = function () {
            that.catchConsole(arguments, LogTypes.WARN);
            console['defaultWarn'].apply(console, arguments);
        };
        console['defaultError'] = console.error.bind(console);
        console.error = function () {
            that.catchConsole(arguments, LogTypes.ERROR);
            console['defaultWarn'].apply(console, arguments);
        };
    };
    MobileLogger.prototype.renderButton = function () {
        var buttonContainer = DOM.createElement('div', {}, {
            position: 'fixed',
            right: '15px',
            bottom: '15px',
            width: '58px',
            height: '58px',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            borderRadius: '15px',
            userSelect: 'none',
            zIndex: '1000001'
        }, document.body);
        var buttonWrapper = DOM.createElement('div', {}, {
            width: '58px',
            height: '58px',
            userSelect: 'none'
        }, buttonContainer);
        buttonWrapper.innerHTML = StaticDataContainer.getSquircleSVG();
        var buttonIcon = DOM.createElement('span', {}, {
            position: 'absolute',
            left: '18px',
            top: '18px',
            width: '24px',
            height: '24px',
        }, buttonWrapper);
        buttonIcon.innerHTML = StaticDataContainer.getIconSVG();
        this.inspectButtonRef = buttonContainer;
    };
    MobileLogger.prototype.renderModal = function () {
        // TODO : - Position fixed ios issue
        var modal = DOM.createElement('div', {}, {
            position: 'fixed',
            left: '0',
            top: '0',
            width: '100vw',
            height: '100%',
            display: 'none',
            flexDirection: 'column',
            justifyContent: 'flex-start',
            alignItems: 'flex-start',
            backgroundColor: '#202124',
            overflow: 'auto',
            transform: 'translate3d(0,0,0)',
            zIndex: '1000000'
        }, document.body);
        this.inspectModalRef = modal;
    };
    // Construct Methods
    MobileLogger.prototype.formatLog = function (log) {
        return "[" + new Date(log.timestamp).toLocaleTimeString() + "] [" + log.type + "] - " + log.message;
    };
    MobileLogger.prototype.catchConsole = function (args, type) {
        var newLog = {
            timestamp: new Date().getTime(),
            type: type,
            message: ''
        };
        for (var i = 0; i < args.length; i++) {
            newLog.message += args[i];
            if (i < args.length - 1) {
                newLog.message += ', ';
            }
        }
        this.addLog(newLog);
    };
    MobileLogger.prototype.addLog = function (log) {
        var _this = this;
        this.logs.push(log);
        // TODO : - Improve log saving and rendering
        setTimeout(function () {
            _this.updateModal(log);
        }, 10);
    };
    MobileLogger.prototype.updateModal = function (log) {
        var formattedLog = this.formatLog(log);
        var boxStyle = '';
        var fontColor = '';
        if (log.type === LogTypes.INFO) {
            boxStyle = "border-bottom: 1px solid #3a3a3a";
            fontColor = 'rgb(240 240 240)';
        }
        else if (log.type === LogTypes.WARN) {
            boxStyle = "border-bottom: 1px solid rgb(102 85 0); background-color: #332b00";
            fontColor = 'rgb(255 221 158)';
        }
        else if (log.type === LogTypes.ERROR) {
            boxStyle = "border-bottom: 1px solid rgb(92 0 0); background-color: #290000";
            fontColor = '#ff8080';
        }
        this.inspectModalRef.innerHTML += "<p style=\"box-sizing: border-box; user-select: text; display: inline-block; width: 100%; max-width: 100%; white-space: pre-wrap; min-height: 20px; padding-top: 1px; padding-bottom: 1px; padding-left: 4px; margin: 0; font-family: consolas, sans-serif; font-size: 12px; line-height: 15px; flex-shrink: 0; color: " + fontColor + "; " + boxStyle + ";\">" + formattedLog + "</p>";
        this.inspectModalRef.scroll(0, this.inspectModalRef.scrollHeight);
    };
    MobileLogger.prototype.toggleModal = function () {
        this.modalState = !this.modalState;
        DOM.renderIf(this.inspectModalRef, this.modalState);
        if (this.modalState) {
            this.inspectModalRef.scroll(0, this.inspectModalRef.scrollHeight);
        }
        else {
        }
    };
    return MobileLogger;
}());
var _md = new MobileLogger();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,